<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en_US" /><updated>2020-06-14T14:55:50+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Visualizards</title><subtitle>We write about whatever we find interesting</subtitle><author><name>visualizards</name><email>visualizards@gmail.com</email></author><entry><title type="html">Managing a Python project</title><link href="http://localhost:4000/2020/06/13/python-project-management.html" rel="alternate" type="text/html" title="Managing a Python project" /><published>2020-06-13T00:00:00+02:00</published><updated>2020-06-13T00:00:00+02:00</updated><id>http://localhost:4000/2020/06/13/python-project-management</id><content type="html" xml:base="http://localhost:4000/2020/06/13/python-project-management.html">&lt;p&gt;This tutorial will teach you to manage a project, and publish it on
PyPI. This guide is majorly influenced by the following &lt;a href=&quot;https://blog.ionelmc.ro/2014/05/25/python-packaging/&quot;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, this tutorial will always be a work in progress (or at least so
long as best practice can change), so the tutorial might change at any
time. However, you can always read old versions of the tutorial, since
it is covered by source control. Finally, if you have any constructive
critic on the contents in this tutorial, please raise an Issue with the
Issue tracker.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#structuring-a-repository&quot; id=&quot;markdown-toc-structuring-a-repository&quot;&gt;Structuring a repository&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-setup-files&quot; id=&quot;markdown-toc-the-setup-files&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; files&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-requirementstxt-file&quot; id=&quot;markdown-toc-the-requirementstxt-file&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-readmerst-file&quot; id=&quot;markdown-toc-the-readmerst-file&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.rst&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-gitignore-file&quot; id=&quot;markdown-toc-the-gitignore-file&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-licensetxt-file&quot; id=&quot;markdown-toc-the-licensetxt-file&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LICENSE.txt&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#running-tests-with-tox&quot; id=&quot;markdown-toc-running-tests-with-tox&quot;&gt;Running tests with tox&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#note-tox-with-conda&quot; id=&quot;markdown-toc-note-tox-with-conda&quot;&gt;NOTE: tox with conda&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#keeping-the-package-source-in-the-src-folder&quot; id=&quot;markdown-toc-keeping-the-package-source-in-the-src-folder&quot;&gt;Keeping the package source in the src folder&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#keeping-the-tests-in-a-tests-folder&quot; id=&quot;markdown-toc-keeping-the-tests-in-a-tests-folder&quot;&gt;Keeping the tests in a tests folder&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#documenting-the-code-with-sphinx&quot; id=&quot;markdown-toc-documenting-the-code-with-sphinx&quot;&gt;Documenting the code with sphinx&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#providing-example-code&quot; id=&quot;markdown-toc-providing-example-code&quot;&gt;Providing example code&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#editable-installs&quot; id=&quot;markdown-toc-editable-installs&quot;&gt;Editable installs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#automatic-documentation&quot; id=&quot;markdown-toc-automatic-documentation&quot;&gt;Automatic documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-continuous-integration&quot; id=&quot;markdown-toc-using-continuous-integration&quot;&gt;Using continuous integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#automatic-coverage-reporting&quot; id=&quot;markdown-toc-automatic-coverage-reporting&quot;&gt;Automatic coverage reporting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#uploading-to-pypi&quot; id=&quot;markdown-toc-uploading-to-pypi&quot;&gt;Uploading to PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;structuring-a-repository&quot;&gt;Structuring a repository&lt;/h1&gt;

&lt;p&gt;An integral part of having reusable code is having a sensible repository
structure. That is, which files do we have and how do we organise them.
Unfortunately, figuring out how to structure a Python project best is
not a trivial task. In this part of the tutorial, I hope to show you a
way to initate any Python project to ensure that you won’t have to do
major effort restructuring the code once you want to publish it.&lt;/p&gt;

&lt;p&gt;Let us start with the folder layout. Your project directory should be
structured in the following way and we will explain why later.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project_name
├── docs
│   ├── make.bat
│   ├── Makefile
│   └── source
│       ├── conf.py
│       └── index.rst
├── examples
│   └── example.py
├── src
│   └── package_name
│       └── __init__.py
├── tests
│   └── __init__.py
├── .gitignore
├── LICENSE.txt
├── MANIFEST.in
├── README.rst
├── requirements.txt
├── setup.cfg
├── setup.py
└── tox.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, this is a lot of files, let us look at these to understand what the
different components are and why they are necessary in a Python project.&lt;/p&gt;

&lt;h2 id=&quot;the-setup-files&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; files&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.cfg&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MANIFEST.in&lt;/code&gt; files are used to specify
how a package should be installed. You might think that you don’t want
to create an installable package, so let’s skip this. DON’T! Even for
small projects, you should include these because of something called
editable installs (more on that later). The most basic setup.py file
should look like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;setuptools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some projects might include more code, especially if you are using
Cython or creating C-extensions to Python. However, if you are not, then
this style will probably suffice. The reason we keep the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;
minimal is that we want to keep as much of the setup configuration as
possible inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.cfg&lt;/code&gt; file. This is to let other people parse
metadata about our package without running a Python file first! The
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.cfg&lt;/code&gt; file should look like this&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[metadata]      
name = {package-name}
version = {version number: 0.0.0}
license = {license name, e.g. MIT&amp;gt;   }
description = {A short description}
long_description = file: README.rst
author = {Author name}
author_email = {Optional: author e-mail}
classifiers=
   {classifier 1}
   {classifier 2}
   {...}
   {classifier m}

[options]
packages = find:
package_dir = 
    =src
include_package_data = True
install_requires = 
   {requirement 1}
   {requirement 2}
   {...}
   {requirement n}

[options.packages.find]
where=src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This file is formated according to &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files&quot;&gt;this&lt;/a&gt;
specification. However, if you you simply follow the layout above,
replacing the elements wrapped in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; with the correct information for
your package, then you are ok.&lt;/p&gt;

&lt;p&gt;There are two sections here that might be confusing, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;classifiers&lt;/code&gt;
section and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_requires&lt;/code&gt; section. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;classifiers&lt;/code&gt; section is
used by PyPI to make it easier for new users to find your package, you
can find a full list of classifiers &lt;a href=&quot;https://pypi.org/classifiers/&quot;&gt;here&lt;/a&gt;.
Likewise, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_requires&lt;/code&gt; section specifies which Python packages that 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; should install before installing the package you are developing. 
Both these fields are optional, so you can leave them blank until you have
anything to fill in.&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MANIFEST.in&lt;/code&gt; file. This file is used to instruct
setupttools on which files it should include when it creates an
installable project. For a general project, I reccomend having a file
with the following layout.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include setup.py
include MANIFEST.in
include LICENSE
include README.md

graft tests
graft examples
graft docs
graft src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-requirementstxt-file&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file is similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_requires&lt;/code&gt; field
in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.cfg&lt;/code&gt; file we described above. However, the aim of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file is not to specify the dependencies of your
package, but the packages needed to work on developing your package.
Each dependency should be on a separate line. Here is an example of a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scikit-learn
tox
black
isort
-e .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will depend on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt; if we are to create scikit-learn
compliant code. Similarly, we need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tox&lt;/code&gt; to run our test-suite. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;black&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isort&lt;/code&gt; are two really good code auto-formatters, which you can read
more about on their GitHub pages (&lt;a href=&quot;https://github.com/psf/black&quot;&gt;black&lt;/a&gt; 
and &lt;a href=&quot;https://github.com/timothycrosley/isort&quot;&gt;isort&lt;/a&gt;). Finally, with the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e .&lt;/code&gt; line we install the current directory in editable mode.&lt;/p&gt;

&lt;h2 id=&quot;the-readmerst-file&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.rst&lt;/code&gt; file&lt;/h2&gt;

&lt;p&gt;The readme file contains the contens that are showed by default on
online source control providers such as GitHub, GitLab and BitBucket.
Normally, this is formatted as a Markdown file. However, I reccomend
that you use reStructuredText (rst) instead, since that is the
file-format used by Sphinx, the most commonly used auto-documentation
tool for Python.&lt;/p&gt;

&lt;p&gt;Additionally, PyPI will only host rst formatted help strings, not
Markdown formatted ones. Thus, if you wish to make your library public
for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; installation in the future, then you should use rst to avoid
writing the same text twice.&lt;/p&gt;

&lt;p&gt;The rst documentation is available &lt;a href=&quot;http://docutils.sourceforge.net/docs/user/rst/quickstart.html&quot;&gt;here&lt;/a&gt;,
and a good summary is available &lt;a href=&quot;https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-gitignore-file&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file contains instructions to Git, informing it of
which files it should not track. Examples of such files are the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__pycache__&lt;/code&gt; files and IDE configuration files. You can either copy the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file in this repository, which should work for a large
array of development environments, or create your own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; using
&lt;a href=&quot;http://gitignore.io/&quot;&gt;gitignore.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-licensetxt-file&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LICENSE.txt&lt;/code&gt; file&lt;/h2&gt;

&lt;p&gt;Your project needs an open source license, otherwise, noone will be able
to use your project. I like the MIT license, which is a very open
license. To decide a license, i reccomend &lt;a href=&quot;https://choosealicense.com/&quot;&gt;choosealicense&lt;/a&gt;
if you are unsure as to which license to use.&lt;/p&gt;

&lt;h2 id=&quot;running-tests-with-tox&quot;&gt;Running tests with tox&lt;/h2&gt;

&lt;p&gt;You should unit test your code. Otherwise there will be bugs, no matter
how simple the codebase is. The tool I like to use for unit testing is
called tox, and works by creating new virtual environments for each
python version you want to test the codebase with. It then installs all
libraries necessary to run the test suite before running it. These
specifications are given in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tox.ini&lt;/code&gt; file, which can have the
following structure&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[tox]
envlist = 
   py35
   py36

[testenv]
deps =
   pytest
   pytest-cov
   pytest-randomly
commands =
    pytest --cov={package_name} --randomly-seed=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;envlist&lt;/code&gt; field specifies which python versions to run the code
with, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deps&lt;/code&gt; field specifies the test dependencies (which might be
different from the devloper dependencies) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commands&lt;/code&gt; specifies which
commands to be ran to run the test suite.&lt;/p&gt;

&lt;h3 id=&quot;note-tox-with-conda&quot;&gt;NOTE: tox with conda&lt;/h3&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tox&lt;/code&gt; by itself doesn’t play nice with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda&lt;/code&gt;. Thus, if you
have an Anaconda or Miniconda installation of Python, then you should
manually install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tox-conda&lt;/code&gt; through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;keeping-the-package-source-in-the-src-folder&quot;&gt;Keeping the package source in the src folder&lt;/h2&gt;

&lt;p&gt;You might have noticed that the source files are kept inside a separate
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder. The reason is that we should be certain that the code we
are testing is the installable code. To accomplish this, it is
neccessary to structure the code this way. For more information on this
topic, see &lt;a href=&quot;https://hynek.me/articles/testing-packaging/#src&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;keeping-the-tests-in-a-tests-folder&quot;&gt;Keeping the tests in a tests folder&lt;/h2&gt;

&lt;p&gt;For the same reason as we keep the package source in the src folder, we
keep the unit tests in the tests folder.&lt;/p&gt;

&lt;h2 id=&quot;documenting-the-code-with-sphinx&quot;&gt;Documenting the code with sphinx&lt;/h2&gt;

&lt;p&gt;When you publish code, you should also publish documentation to that
code, and creating the documentation is very simple if you have good
docstrings and use &lt;a href=&quot;http://www.sphinx-doc.org/en/master/&quot;&gt;sphinx&lt;/a&gt;.
To use sphinx, navigate to the docs folder in the terminal window and
type sphinx-quickstart.&lt;/p&gt;

&lt;p&gt;We will not discuss sphinx in detail here, the only extra note I want to
add is to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpydoc&lt;/code&gt; extension so your docstrings can be formated
according to the &lt;a href=&quot;https://github.com/numpy/numpydoc&quot;&gt;numpydoc&lt;/a&gt; standard.
(Prevously, I recommended the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sphinx.ext.napoleon&lt;/code&gt; extension instead
of the official &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpydoc&lt;/code&gt; extension, but unfortunately, that extension
have some inconsistencies with the specification.)&lt;/p&gt;

&lt;h2 id=&quot;providing-example-code&quot;&gt;Providing example code&lt;/h2&gt;

&lt;p&gt;Any library should come with at least a minimal example script so
prospective users can see how the package was intended to be used. Keep
these example scripts in the examples folder.&lt;/p&gt;

&lt;h1 id=&quot;editable-installs&quot;&gt;Editable installs&lt;/h1&gt;

&lt;p&gt;One immensely useful facet of the python ecosystem is editable installs.
Often, when new Python programmers create a project, they do not install
the project with pip. Rather, whenever they need to use the code from
one project within another, they end up manually modifying the system
path environment variable. If this sounds familiar, then you should stop
that immediately. There is a cleaner, easier and less error-prone way to
accomplish the same. This way is called editable installs.&lt;/p&gt;

&lt;p&gt;Normally when we install a Python package, it is copied into the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site-packages&lt;/code&gt; directory. This is not ideal if the code we installed is
code that we are actively developing. In this case, we want to create a
symbolic link between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site-packages&lt;/code&gt; directory and the project
directory, and a way to accomplish this is through editable installs.&lt;/p&gt;

&lt;p&gt;To installl a project in editable mode, simply navigate to the project
root directory and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install -e .&lt;/code&gt; in the terminal window. A
benefit of doing it this way, is that we have better cross-platform
support. Windows and UNIX based systems have vastly different ways of
handling the path variable, so your old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.path.append&lt;/code&gt; hack might not
work as intended on a Windows machine. Additionally, the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.path.append&lt;/code&gt; method is highly dependent on the file-structure on
your computer, whereas editable installs are not.&lt;/p&gt;

&lt;h1 id=&quot;automatic-documentation&quot;&gt;Automatic documentation&lt;/h1&gt;

&lt;p&gt;The second most important part of a project, after the source code
itself, is the documentation. Luckily, writing Python documentation is
relatively painless so long as you write your docstrings following the
Sphinx guidelines. I will assume that you have a working sphinx
environment and simply want to host the documentation somewhere.&lt;/p&gt;

&lt;p&gt;If you are in this category, then you are in luck since you can host
your documentation for free on &lt;a href=&quot;https://readthedocs.org/&quot;&gt;Read the Docs&lt;/a&gt;.
To do this, you need to connect your GitHub user to &lt;a href=&quot;https://readthedocs.org&quot;&gt;https://readthedocs.org&lt;/a&gt;.
(note the .org top level domain (TLD), it’s not readthedocs.io TLD). 
Once you have connected your GitHub to Read the Docs, you need to add
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.readthedocs.yml&lt;/code&gt; file to your repository. This file should have the
following lines in it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;setup_py_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After adding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.readthedocs.yml&lt;/code&gt; file to the repository, it should
have the following layout.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project_name
├── docs
│   ├── make.bat
│   ├── Makefile
│   └── source
│       ├── conf.py
│       └── index.rst
├── examples
│   └── example.py
├── src
│   └── package_name
│       └── __init__.py
├── tests
│   └── test_package_name
│       └── __init__.py
├── .gitignore
├── .readthedocs.yml  &amp;lt;- This file is new
├── LICENSE.txt
├── MANIFEST.in
├── README.rst
├── requirements.txt
├── setup.cfg
├── setup.py
└── tox.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once it does, you can import the project to Read the Docs, by pressing
the “Import a Project” button and choosing the correct GitHub
repository.&lt;/p&gt;

&lt;p&gt;You might want to have a badge that shows whether your documentation
builds correctly on your GitHub page, to do this, press the “i” button
on the right of the green “docs passing” badge (or red “docs
failing” if your documentation isn’t building correctly). Copy the rst
code to somewhere near the beginning of your readme file. The code
should be on the following form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rst&quot; data-lang=&quot;rst&quot;&gt;.. image:: https://readthedocs.org/projects/{repo_name}/badge/?version=latest
   :target: https://{repo_name}.readthedocs.io/en/latest/?badge=latest
   :alt: Documentation Status&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;using-continuous-integration&quot;&gt;Using continuous integration&lt;/h1&gt;

&lt;p&gt;Another useful tool when developing code is a continuous integration
tool. Such tools will automatically run the unit tests on activity to
the GitHub repository. Luckily, there exists a very good tool called
&lt;a href=&quot;https://travis-ci.org/&quot;&gt;&lt;em&gt;Travis-CI&lt;/em&gt;&lt;/a&gt;, which is free for all open
source projects.&lt;/p&gt;

&lt;p&gt;To use Travis-CI, you must link your GitHub user to Travis CI on their
webpage. After this, you simply choose which repository to activate
Travis for and you are set to go. When you have activated Travis for a
specific repo, you need to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file to the project root,
giving you the following file structure&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project_name
├── docs
│   ├── make.bat
│   ├── Makefile
│   └── source
│       ├── conf.py
│       └── index.rst
├── examples
│   └── example.py
├── src
│   └── package_name
│       └── __init__.py
├── tests
│   └── test_package_name
│       └── __init__.py
├── .gitignore
├── .readthedocs.yml
├── .travis.yml  &amp;lt;- This file is new
├── LICENSE.txt
├── MANIFEST.in
├── README.rst
├── requirements.txt
├── setup.cfg
├── setup.py
└── tox.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file should be the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# command to install dependencies&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pip install tox-travis&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# command to run tests&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tox&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This file will ensure that tox is run on Travis-CI any time someone
pushes a change to the GitHub repository. You might also want to add a
badge to your readme file. To do this, navigate to the Travis-CI
dashboard, press the link to the repository that you want to add the
badge for, press the badge showing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build passing&lt;/code&gt; (ideally, it will
show &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build failing&lt;/code&gt; if your tests are failing) and finally, choose rst
from the bottom dropdown menu. Once you have done this, copy the text in
the text-box and paste it somewhere around the top of yor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.rst&lt;/code&gt;
file. The rst code that you copy should look something like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rst&quot; data-lang=&quot;rst&quot;&gt;.. image:: https://travis-ci.org/{github_username}/{repo_name}.svg?branch={branch_name}
   :target: https://travis-ci.org/{github_username}/{repo_name}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;automatic-coverage-reporting&quot;&gt;Automatic coverage reporting&lt;/h1&gt;

&lt;p&gt;Another useful tool in a programmer’s arsenal is automatic code
coverage reporting. Have you ever seen a repository where they have a
badge that shows how high their code-coverage is with a small badge?
They accomplish this using one of many automatic code-coverage
reporters. Personally, I like to use &lt;a href=&quot;https://coveralls.io/&quot;&gt;&lt;em&gt;Coveralls&lt;/em&gt;&lt;/a&gt;,
which has a relatively easy-to-use interface and integrates well with Travis-CI.&lt;/p&gt;

&lt;p&gt;To start using Coveralls, you must first register and link your GitHub
account with Coveralls. Once you have done that, you need to add your
repository to Coveralls. You can do this, by pressing the plus button on
the left-hand side of the Coveralls dashboard and enable whichever
repository you want. Once you have done this, you must update the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file so Coveralls are ran after the test suite. The new
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file should look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# command to install dependencies&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pip install tox-travis&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pip install coveralls&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# command to run tests&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tox&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;coveralls&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you have made this update, then Coveralls will run after travis.
Next, you want to add the coverage badge to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.rst&lt;/code&gt; file. In
the Coveralls project dashboard, you should see a badge that displays
your code coverage, press the embed button on the top right corner near
the badge and copy the code for rst into your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.rst&lt;/code&gt; file. The
code you copy should have the following format&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rst&quot; data-lang=&quot;rst&quot;&gt;.. image:: https://coveralls.io/repos/github/{github_username}/{repo_name}/badge.svg?branch={branch_name}
   :target: https://coveralls.io/github/{github_username}/{repo_name}?branch={branch_name}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;uploading-to-pypi&quot;&gt;Uploading to PyPI&lt;/h1&gt;

&lt;p&gt;It is finally time to upload our code to PyPI, making it easily
installable for others. Uploading code to PyPI is very simple. First,
create an account on PyPI. Then, you need to install two packages; twine
and wheel. To do this, write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install twine wheel&lt;/code&gt; in the terminal
window. Then, navigate to the project root and type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python setup.py sdist bdist_wheel&lt;/code&gt;, this will prepare your package for
uploading to PyPI. Then, write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;twine upload dist/*&lt;/code&gt; to upload your
project.&lt;/p&gt;</content><author><name>visualizards</name><email>visualizards@gmail.com</email></author><summary type="html">This tutorial will teach you to manage a project, and publish it on PyPI. This guide is majorly influenced by the following tutorial.</summary></entry></feed>